---
title: "Sick-Sicker Replication"
author: 
  - name: "John Graves"
    affiliation: 
      - "Vanderbilt University School of Medicine"
      - "Vanderbilt Owen Gradute School of Management"
      - "Vanderbilt University Medical Center"
    email: "john.graves@vanderbilt.edu"
  - name: "Shawn Garbett"
    affiliation: 
      - "Vanderbilt University School of Medicine"
      - "Vanderbilt University Medical Center"    
    email: "shawn.garbett@vumc.org"
  - name: "Kun-Woo Kim"
    affiliation:
      - "Vanderbilt University"
date: today
format: 
  closeread-html:
    css: des-styling.css
    code-tools: false
    fig-format: svg
    toc: false
    linkcolor: tomato
bibliography: references.bib    
editor_options: 
  chunk_output_type: console
---

# Setup

```{r}
library(tidyverse)
library(simmer)
library(here)
library(flextable)
source(here('discount.R'))
source(here('main_loop.R'))  # Boilerplate code
source(here('cea-table-functions.R'))
```

# Define Parameters

```{r}
inputs <- list(
    N      = 1e4,
  
    # Parameters
    horizon=    75,      # Time horizon
    
    # Cycle => 1 year
    d.r    =     0.0,   # Discount Rate
    
    r.HS1  =     0.15,   # Disease Onset Rate / year       (H  -> S1)
    r.S1H  =     0.5,    # Recovery Rate / year            (S1 -> H)
    r.S1S2 =     0.105,   # Disease Progression rate / year (S1 -> S2)
    r.HD   =     0.002,  # Healthy to Dead rate / year     (H  -> D)
    hr.S1D =     3,      # Hazard ratio in S1 vs healthy 
    hr.S2D =    10,      # Hazard ratio in S2 vs healthy
    hr.S1S2.TrtB = 0.6,  # REduction in rate of disease progression
 
    # Annual Costs
    c.H    =  2000,      # Healthy individuals 
    c.S1   =  4000,      # Sick individuals in S1
    c.S2   = 15000,      # Sick individuals in S2
    c.D    =     0,      # Dead individuals
    c.TrtA  = 12000,     # Additional Annual cost for S1 and S2
    c.TrtB = 13000,      # Cost of treatment B
    
    # Utility Weights
    u.H    =     1.00,   # Healthy
    u.S1   =     0.75,   # S1
    u.S2   =     0.50,   # S2
    u.D    =     0.00,   # Dead
    
    # Intervention Effect
    u.TrtA  =     0.95,   # S1 Utility for treatment in S1
    
    wtp    =     1e5,    # 100k willingness to pay
    
    treatA = FALSE,
    treatB = FALSE
  )

```

# Define Resources and Counters

```{r}
counters <- c(
  "time_in_model",
  "death",
  "healthy",
  "sick1",
  "sick2",
  "A",
  "B"
)
```

# Initialize Patient

```{r}
# Define starting state of patient
initialize_patient <- function(traj, inputs)
{
  traj                   |>
  seize("time_in_model") |>
  set_attribute("AgeInitial", function() 25) |>
  set_attribute("State", 0) |> # Patients start healthy
  seize("healthy")       |>
  set_attribute("trtA", function() inputs$treatA == TRUE) |>
  set_attribute("trtB", function() inputs$treatB == TRUE)
}

```

# Cleanup and Termination

```{r}
# Cleanup function if a termination occurs
# Good for releasing any seized resources based on state.
cleanup_on_termination <- function(traj, inputs)
{
  traj |> 
  release("time_in_model") |>
  branch( 
    function() get_attribute(env, "State")+1,
      continue = rep(TRUE, 3),
      trajectory() |> release("healthy"),
      trajectory() |> release("sick1"),
      trajectory() |> release("sick2") 
  ) |>
  branch( # Assigned to treatment A and not healthy
    function() (get_attribute(env, "trtA")  && 
                get_attribute(env, "State")) + 1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> release('A')
  ) |>
  branch( # Assigned to treatment B and not healthy
    function() (get_attribute(env, "trtB")  && 
                get_attribute(env, "State")) + 1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> release('B')
  )
}

terminate_simulation <- function(traj, inputs)
{
  traj |>
  branch( function() 1, 
          continue=FALSE,
          trajectory() |> cleanup_on_termination(inputs)
        )
}
```

# Define Events

## Death

```{r}

years_till_death <- function(inputs)
{
  state <- get_attribute(env, "State")
  rate <- inputs$r.HD
  if(state == 1) rate <- rate * inputs$hr.S1D # Deal with Sick1 Hazard Ratio
  if(state == 2) rate <- rate * inputs$hr.S2D
  rexp(1, rate)
}

death <- function(traj, inputs)
{
  traj |> branch(
    function() 1,
    continue=c(FALSE), # False is patient death, had to use a branch to force termination
    trajectory("Death") |>
      mark("death")     |> # Must be in 'counters'
      terminate_simulation(inputs)
  )
}
```

## Sick

```{r}
years_till_sick1 <- function(inputs)
{
  state <- get_attribute(env, "State") 
  if(state == 0) # 0 => Healthy
  {
    rexp(1,inputs$r.HS1)
  } else
  {
    inputs$horizon+1 # Past end of simulation time
  }
}

sick1 <- function(traj, inputs)
{
  traj                      |> 
  set_attribute("State", 1) |> # 1 => Sick 1 (S1)
  release('healthy')        |> # Track state change for tally later
  seize('sick1')            |>
  branch( 
    function() get_attribute(env, "trtA")+1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> seize('A')
  )                         |>
  branch( 
    function() get_attribute(env, "trtB")+1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> seize('B')
  )
}
```

## Healthy (from Sick)

```{r}
years_till_healthy <- function(inputs)
{
  state <- get_attribute(env, "State") 
  if(state == 1) # 1 => Sick 1
  {
    rexp(1,inputs$r.S1H)
  } else
  {
    inputs$horizon+1 # Past end of simulation time
  }
}

healthy <- function(traj, inputs)
{
  traj                      |> 
  set_attribute("State", 0) |> # 0 => Healthy (H)
  seize('healthy')          |>
  release('sick1')          |>
  branch(
    function() get_attribute(env, "trtA") +1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> release('A')
  )                         |>
  branch(
    function() get_attribute(env, "trtB") +1,
    continue = rep(TRUE, 2),
    trajectory(),  # No Treatment
    trajectory() |> release('B')
  )
}
```

## Sicker

```{r}
years_till_sick2 <- function(inputs)
{
  state <- get_attribute(env, "State") 
  onB <- get_attribute(env, "trtB")
  
  if(state == 1 && !(onB)) # 1 => Sick1
  {
    rexp(1,inputs$r.S1S2)
  } else if (state == 1 && onB) 
  {
    rexp(1,inputs$r.S1S2 * inputs$hr.S1S2.TrtB)
  } else
  {
    inputs$horizon+1 # Past end of simulation time
  }
}

sick2 <- function(traj, inputs)
{
  traj                      |> 
  set_attribute("State", 2) |> # 2 => Sick 2 (S2)
  release('sick1')          |> # Track state change for tally later
  seize('sick2')
}
```

## Event Registry

```{r}
# Main Event registry
event_registry <- list(
  list(name          = "Terminate at time horizon",
       attr          = "aTerminate",
       time_to_event = function(inputs) inputs$horizon-now(env),
       func          = terminate_simulation,
       reactive      = FALSE),
  list(name          = "Death",
       attr          = "aDeath",
       time_to_event = years_till_death,
       func          = death,
       reactive      = TRUE),
  list(name          = "Sick1",
       attr          = "aSick1",
       time_to_event = years_till_sick1,
       func          = sick1,
       reactive      = TRUE),
  list(name          = "Healthy",
       attr          = "aHealthy",
       time_to_event = years_till_healthy,
       func          = healthy,
       reactive      = TRUE),
  list(name          = "Sick2",
       attr          = "aSick2",
       time_to_event = years_till_sick2,
       func          = sick2,
       reactive      = TRUE)
)

```

# Outcomes

## Costs

```{r}
cost_arrivals <- function(arrivals, inputs)
{
  arrivals$cost  <- 0  # No costs yet
  arrivals$dcost <- 0  # No discounted costs either
  
  selector = arrivals$resource == 'healthy'
  arrivals$cost[selector] <- inputs$c.H *
    (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dcost[selector] <- discount_value(inputs$c.H,
    arrivals$start_time[selector], arrivals$end_time[selector])
  
  selector = arrivals$resource == 'sick1'
  arrivals$cost[selector] <- inputs$c.S1 *
    (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dcost[selector] <- discount_value(inputs$c.S1,
    arrivals$start_time[selector], arrivals$end_time[selector])
  
  selector = arrivals$resource == 'sick2'
  arrivals$cost[selector] <- inputs$c.S2 *
    (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dcost[selector] <- discount_value(inputs$c.S2,
    arrivals$start_time[selector], arrivals$end_time[selector])
 
  selector = arrivals$resource == 'A'
  arrivals$cost[selector] <- inputs$c.TrtA *
    (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dcost[selector] <- discount_value(inputs$c.TrtA,
    arrivals$start_time[selector], arrivals$end_time[selector])
  
  selector = arrivals$resource == 'B'
  arrivals$cost[selector] <- inputs$c.TrtB *
    (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dcost[selector] <- discount_value(inputs$c.TrtB,
    arrivals$start_time[selector], arrivals$end_time[selector])
 
  arrivals
}

```

## Quality-Adjusted Life Years

```{r}
qaly_arrivals <- function(arrivals, inputs)
{
  arrivals$qaly  <- 0  # No qaly yet
  arrivals$dqaly <- 0  # No discounted qaly either
  
  selector <- arrivals$resource == 'healthy'
  arrivals$qaly[selector] <-
    inputs$u.H*
     (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dqaly[selector] <- 
      discount_value(inputs$u.H, 
                     arrivals$start_time[selector],
                     arrivals$end_time[selector])
  
  selector <- arrivals$resource == 'sick1'
  uS1 <- if(inputs$treatA) inputs$u.TrtA else inputs$u.S1
  arrivals$qaly[selector] <-
    uS1*
     (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dqaly[selector] <- 
      discount_value(uS1, 
                     arrivals$start_time[selector],
                     arrivals$end_time[selector])
  
  selector <- arrivals$resource == 'sick2'
  arrivals$qaly[selector] <-
    inputs$u.S2*
     (arrivals$end_time[selector] - arrivals$start_time[selector])
  arrivals$dqaly[selector] <- 
      discount_value(inputs$u.S2, 
                     arrivals$start_time[selector],
                     arrivals$end_time[selector])
  
  arrivals
}

```

# Define Model Run Function

```{r}
# This does a single DES run versus the defined inputs.
des_run <- function(inputs)
{
  env  <<- simmer("SickSicker")
  traj <- des(env, inputs)
  env |> 
    create_counters(counters) |>
    add_generator("patient", traj, at(rep(0, inputs$N)), mon=2) |>
    run(inputs$horizon+1/365) |> # Simulate just past horizon (in years)
    wrap()
        
  get_mon_arrivals(env, per_resource = T) |>
    cost_arrivals(inputs) |> 
    qaly_arrivals(inputs) 
}
```

```{r}
# Standard of Care (no treatments)
set.seed(23)
run.SoC <- des_run(modifyList(inputs, list(treatA = FALSE, treatB = FALSE)))

#- Treatment A
set.seed(23)
run.A <- des_run(modifyList(inputs, list(treatA = TRUE, treatB = FALSE)))

#- Treatment B
set.seed(23)
run.B <-  des_run(modifyList(inputs, list(treatA = FALSE, treatB = TRUE)))

# Treatment A + B
set.seed(23)
run.AB <- des_run(modifyList(inputs, list(treatA = TRUE, treatB = TRUE)))

aggregate_run <- function(run) {
  run |>
  as_tibble()  |> 
  group_by(name) |> 
  summarise_at(vars(dcost,dqaly),sum) |> 
  ungroup() |> 
  summarise_at(vars(dcost,dqaly),mean)
}

result.SoC <- run.SoC |> aggregate_run() |> mutate(strategy = "SoC")
result.A <- run.A |> aggregate_run() |> mutate(strategy = "A")
result.B <- run.B |> aggregate_run() |> mutate(strategy = "B")
result.AB <- run.AB |> aggregate_run() |> mutate(strategy = "AB")


# Note: non-DES results are calcualted in index.qmd in the matrix-cea-tutorial repo; 
# these results are based on deterministic models based on 
# 1. replicating the original paper (note: does not use matrix embedding for
# transition probabilities)
# 2. embedding via rate matrix
# 3. Markov chain with rewards methods

res_cost <- list(
  "DES" = c(result.SoC$dcost, result.A$dcost, result.B$dcost, result.AB$dcost),
  "Embedded" = c(147036.6 ,271907.9 ,243650.1, 353744.0),
  `Markov Chains With Rewards` = c(140716.8 ,259005.0, 232415.1, 332194.9),
  "Replication" = c(151579.9, 284804.5, 259100.4, 378875.2)
)

res_effect <- list(
  "DES"  = c(result.SoC$dqaly, result.A$dqaly, result.B$dqaly, result.AB$dqaly),
  "Embedded" = c(21.02288, 21.73058 ,22.56671, 23.42227),
  `Markov Chains With Rewards` = c(20.91890, 21.59932, 22.38365, 23.20440),
  "Replication" = c(20.71133, 21.49866, 22.18447, 23.13684)
)

res_strategies <- list(
  "DES"  = c("SoC", "A", "B", "AB"),
  "Embedded" = c("SoC", "A", "B", "AB"),
  `Markov Chains With Rewards` = c("SoC", "A", "B", "AB"),
  "Replication" = c("SoC", "A", "B", "AB")
)

create_cea_table(cost = res_cost, effect = res_effect, strategies = res_strategies)

```

```{r}

```

