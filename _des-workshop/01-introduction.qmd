---
title: "Discrete Event Simulation for Health Decision Modeling"
subtitle: "1. Conceptual Overview"
author: 
  - name: "John Graves"
    affiliation: 
      - "Vanderbilt University School of Medicine"
      - "Vanderbilt Owen Gradute School of Management"
      - "Vanderbilt University Medical Center"
    email: "john.graves@vanderbilt.edu"
  - name: "Shawn Garbett"
    affiliation: 
      - "Vanderbilt University School of Medicine"
      - "Vanderbilt University Medical Center"    
    email: "shawn.garbett@vumc.org"
  - name: "Kun-Woo Kim"
    affiliation:
      - "Vanderbilt University"
date: today
format: 
  closeread-html:
    css: des-styling.css
    code-tools: false
    fig-format: svg
    toc: false
    linkcolor: tomato
bibliography: references.bib    
editor_options: 
  chunk_output_type: console
---


# Introduction

<!-- ::: callout-important -->
<!-- This text was AI-generated just to put in some filler for now; we'll want to go back and edit using our own language.  -->
<!-- ::: -->

<span style="color:cornflowerblue">**Discrete event simulation (DES) **</span> is a modeling framework offering unique advantages for evaluating health decision problems. DES explicitly models patients' experience via trajectories that track a series of events occurring over time, such as disease onset, treatment initiation, and other clinical outcomes. 

What differentiates DES from other modeling approaches (e.g., discrete time Markov, microsimulation) is that DES can also capture dynamic interactions between patients and system resources---making it particularly valuable for evaluating strategies that affect system capacity, waiting times, or resource utilization.

In what follows, we detail the concepts and execution of DES for health decision analysis. We begin with a conceptual overview of DES, and then build up a DES for a widely-used progressive disease model [@alarid2023introductory]. 

## Conceptual Overview


:::{.cr-section}
@cr-carrace  A useful framework for understanding DES is a car race in which each patient represents a driver navigating a complex circuit with multiple checkpoints, pit stops, and potential hazards. 

:::{#cr-carrace}
![](images/starting-line-cars2.png)
:::

@cr-carrace2 In this framework, each driver follows its own unique journey ("trajectory") through a race course, with discrete events corresponding to key moments like crossing timing markers, making pit stops for fuel and tire changes, or experiencing unexpected mechanical issues that require assistance. 


:::{#cr-carrace2}
![](images/car-race.png)
:::

:::

<!-- ::: {.column-screen style="background-image:url(images/starting-line-cars2.png); background-size: 100vw; height: 600px; background-position: center bottom; background-repeat: no-repeat; opacity: 0.5"} -->
<!-- ::: -->
<!-- <figcaption>Image generated by ChatGPT 4o</figcaption> -->


In a DES, the modeler tracks not only each car's total race time but also the precise timing and sequence of every significant event---when cars enter the pit lane, how long they wait for available mechanics, whether they experience delays due to track congestion---and how these operational realities affect both their race performance (i.e., costs, quality-adjusted health outcomes) and resource consumption. 

::: {.column-screen style="background-image:url(images/scoreboard-race.png); background-size: 100vw; height: 600px; background-position: center top; background-repeat: no-repeat; opacity: 0.5"}
:::
<figcaption>Image generated by ChatGPT 4o</figcaption>



<!-- ::: {.column-screen style="background-image:url(images/finish-line-cars.png); background-size: 100vw; height: 400px; background-position: center +15%; background-repeat: no-repeat; opacity: 0.5"} -->
<!-- ::: -->
<!-- <figcaption>Image generated by ChatGPT 4o</figcaption> -->

:::{.cr-section}


To understand and construct a DES it's important to define several concepts:

@cr-table <span style="color:#DF8F44FF">**Tokens**</span> represent an individual entity (typically a patient) that flows through the simulation over time.

When it comes to visualizing a DES--we'll cover this in a bit when we provide an overview of Petri net diagrams---it's common to use solid shapes like squares and circles. 

@cr-petri-token2 A patient, for example, might be represented by a solid black circle ...

[@cr-petri-token1]{scale-by="2"} ... while a hospital might be represented by a solid red rectangle. 

@cr-petri-token-queue In that way, we can both conceptualize and model instances where hospital capacity is constrained, creating queues and wait times that delay time to treatment. 

:::{#cr-petri-token-queue}
![](images/petri-token-queue.png)
:::




:::{#cr-petri-token1}
![](images/clipboard-810075082.png)
:::

:::{#cr-petri-token2}
![](images/clipboard-1758535931.png)
:::


@cr-table Tokens take on attributes (e.g., age, gender) that are either fixed throughout the model, or that change as they make their way through the model. 

@cr-table For example, suppose we aim to model different strategies for treating colon cancer. A token might represent a 67-year-old woman with Stage III colorectal cancer.



:::{#cr-table}
```{r}

library(knitr)
library(scales)
#show_col(ggsci::pal_jama("default")(6))

des_table <- data.frame(
  Concept = c("<span style='color:#DF8F44FF'>**Tokens**</span>", 
              "<span style='color:#6A6599FF'>**Places**</span>",
              "<span style='color:#00A1D5FF'>**Events/transitions**</span>", 
              "<span style='color:#B24745FF'>**Trajectories**</span>", 
              "<span style='color:#79AF97FF'>**Resources**</span>"),
  Definition = c(
    "Represent patients or units flowing through the simulation, carrying attributes.",
    "Indicate system states or conditions (e.g., “Healthy,” “Sick,” “Under Treatment”)",
    "Discrete time points when system state changes; trigger resource use and transitions.",
    "The sequence of events and states a token experiences during the simulation.",
    "Entities required or consumed by events; may be limited (constrained) or unlimited (unconstrained)."
  ),
  Examples = c(
    "A 67-year-old woman with Stage III colorectal cancer.",
    "Sick disease state",
    paste("- Disease incidence<br>",
          "- Disease progression<br>",
          "- Death from disease or background causes<br>",
          "- Enter treatment waiting list<br>",
          "- Acute event (e.g., hospitalization)"),
    "Patient progresses from diagnosis → treatment → remission → relapse → death",
    paste("- Total time in healthy state<br>",
          "- Total time in sick state<br>",
          "- Number of available hospital beds")
  ),
  stringsAsFactors = FALSE
)

des_table_ <- des_table[1,]

kable(des_table_)
```

:::

:::{#cr-table2}
```{r}
des_table_ <- des_table[1:2,]
kable(des_table_)
```
:::

Tokens reside in <span style='color:#6A6599FF'>**Places, **</span> @cr-table2 which indicate system states or conditions (e.g., "Healthy," "Sick," "Dead") @cr-petri-place

:::{#cr-petri-place}
![](images/petri-place.png)
:::

@cr-petri-place For many health decision models, places are simply health states. 

But for a resource-constrained model like we will build, places could also represent hospitals, treatment slots, etc. [@cr-model6place]{pan-to="-25%, -50%" scale-by="2"}

:::{#cr-model6place}
![](images/petri-model6.png)
:::

Now suppose we want to track this patient's progression through diagnosis, treatment (e.g., surgery, chemo), remission, and potential relapse. These are examples of <span style="color:#00A1D5FF">**events/transitions**</span> in a DES model.  @cr-table3

Transitions are often denoted by bars or rectangles that denote discrete system state changes. @cr-petri-transition

For example, disease incidence--that is, the transition from healthy to sick---would be captured by a transition. [@cr-model6place]{pan-to="100%, 15%" scale-by="3"}

:::{#cr-petri-transition}
![](images/clipboard-3059554460.png)
:::

The flow between <span style='color:#6A6599FF'>**places**</span> and <span style='color:#00A1D5FF'>**transitions**</span> is denoted by an **arc**. @cr-petri-arc

:::{#cr-petri-arc}
![](images/clipboard-1434672209.png)
:::

:::{#cr-table3}
```{r}
des_table_ <- des_table[1:3,]
kable(des_table_)
```
:::

:::

These visual tools can be combined into a **Petri net** diagram that represents the flow of resources, entities, and control through a system over time. Petri nets are particularly useful for depicting concurrent processes and shared resources.  


:::{.cr-section}

Formally, a Petri net is a directed bipartite graph that describes a distributed system. @cr-petrigif

In the example shown to the right, each transition moves a token through the system. 

:::{#cr-petrigif}
![](images/Animated_Petri_net_commons.gif)
<figcaption>Source: [Wikipedia](https://en.wikipedia.org/wiki/Petri_net)</figcaption> 
:::

:::

Our ultimate objective is to build up a DES based on the following Petri net diagram for the progressive disease model with resource constraints.


:::{.column-screen}
![](images/petri-model6.png)
:::

| Element | Type | Description |
|:-----------------------:|:------------:|:--------------------------------|
| ![](images/clipboard-3339342299.png) | **Place** | Indicate system states or conditions (e.g., “Healthy,” “Sick,” “Under Treatment”). |
| ![](images/clipboard-3059554460.png) | **Transition** | Signify events that may cause a change in state (e.g., “disease incidence,” “death,” “recovery”). |
| ![](images/clipboard-810075082.png){width="45"} ![](images/clipboard-1758535931.png) | **Token** | Represent individual entities (e.g., patients, hospital beds or available treatment slots) that flow through the net. |
| ![](images/clipboard-1434672209.png) | **Arc** | Show the flow between places and transitions. |


:::{.cr-section}

Once we have represented the system, we need some way to record the experience of each token (i.e., patient) in the system. This is accomplished via a <span style='color:#B24745FF'>**trajectory**</span> @cr-table4 

@cr-table4 A <span style="color:#B24745FF">**trajectory**</span> captures the specific sequence of events a patient  experiences. 

:::{#cr-table4}
```{r}
des_table_ <- des_table[1:4,]
kable(des_table_)
```
:::

As the token/patient progresses through the model, they "consume" <span style="color:#79AF97FF">**resources**</span>. @cr-table5

You can think of <span style="color:#79AF97FF">**resources**</span> as things we want to track, such as time in the model, time in the healthy state, waiting times for treatment, etc. @cr-table5

In that sense, <span style="color:#79AF97FF">**resources**</span> can be either subject to constraints, or not. 

A patient's experience of time in a place or health state, for example, can be thought of as unconstrained resource: one patient's experience of time does not preclude another patient in the model from also experiencing the passage of time. 

Conversely, in a resource-constrained DES we might want to put limits on the total number of patients who can receive treatment at one time. This both helps better represent real-world scenarios, and also facilitates additional policy strategy modeling (e.g., expansion of treatment slots, staffing, or hospital beds to reduce wait times). @cr-table5

:::{#cr-table5}
```{r}
kable(des_table)
```
:::


:::




<!-- # Extra Stuff -->

<!-- <span class="hl hl-blue">blue highlighted text</span>  -->
<!-- <span class="hl hl-red">red highlighted text</span>  -->
<!-- <span class="hl hl-cyan">cyan highlighted text</span>  -->
<!-- <span class="hl hl-green">green highlighted text</span>  -->
<!-- <span class="hl hl-brown">brown highlighted text</span>  -->

<!-- Here's some <span style="color:cornflowerblue">**some bolded blue text**</span> -->
<!-- How about some <span style="color:firebrick">**red bolded text**</span> -->
<!-- How about some <span style="color:darkcyan">**cyan bolded text**</span>  -->



